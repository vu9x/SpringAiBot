version: '3.9'

volumes:
  rabbitmq-data:
    driver: local
  postgres-data:
    driver: local
  traefik-certs:
    driver: local

services:
  dispatcher:
    container_name: dispatcher
    restart: on-failure
    build:
      context: ./
      dockerfile: ./dispatcher/Dockerfile
#    TODO нужно откомментировать для локального запуска без traefik
#    ports:
#      - ${DISPATCHER_PORT}:${DISPATCHER_PORT}
    environment:
      HOST_URL: 'telegramaibot.ru'
      DISPATCHER_PORT: ${DISPATCHER_PORT}
      TG_BOT_NAME: ${TG_BOT_NAME}
      TG_BOT_TOKEN: ${TG_BOT_TOKEN}
      TG_BOT_URI: ${TG_BOT_URI}
      RABBIT_HOST: ${RABBIT_HOST}
      RABBIT_PORT: ${RABBIT_PORT}
      RABBIT_USERNAME: ${RABBIT_USERNAME}
      RABBIT_PASSWORD: ${RABBIT_PASSWORD}
      RABBIT_TEXT_MESSAGE_UPDATE_QUEUE: ${RABBIT_TEXT_MESSAGE_UPDATE_QUEUE}
      RABBIT_DOC_MESSAGE_UPDATE_QUEUE: ${RABBIT_DOC_MESSAGE_UPDATE_QUEUE}
      RABBIT_PHOTO_MESSAGE_UPDATE_QUEUE: ${RABBIT_PHOTO_MESSAGE_UPDATE_QUEUE}
      RABBIT_ANSWER_MESSAGE_UPDATE_QUEUE: ${RABBIT_ANSWER_MESSAGE_UPDATE_QUEUE}
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.dispatcher.loadbalancer.server.port=${DISPATCHER_PORT}"
      - "traefik.http.routers.dispatcher.rule=Host(`telegramaibot.ru`) && PathPrefix(`/callback`)"
      - "traefik.http.routers.dispatcher.entrypoints=websecure8"
      - "traefik.http.routers.dispatcher.tls=true"
    logging:
      driver: 'json-file'
      options:
        max-size: '100m'
        max-file: '3'
    depends_on:
      rabbit-mq:
        condition: service_healthy

  node:
    container_name: node
    restart: on-failure
    build:
      context: ./
      dockerfile: ./node/Dockerfile
    environment:
      HOST_URL: 'telegramaibot.ru'
      NODE_PORT: ${NODE_PORT}
      RABBIT_HOST: ${RABBIT_HOST}
      RABBIT_PORT: ${RABBIT_PORT}
      RABBIT_USERNAME: ${RABBIT_USERNAME}
      RABBIT_PASSWORD: ${RABBIT_PASSWORD}
      RABBIT_TEXT_MESSAGE_UPDATE_QUEUE: ${RABBIT_TEXT_MESSAGE_UPDATE_QUEUE}
      RABBIT_DOC_MESSAGE_UPDATE_QUEUE: ${RABBIT_DOC_MESSAGE_UPDATE_QUEUE}
      RABBIT_PHOTO_MESSAGE_UPDATE_QUEUE: ${RABBIT_PHOTO_MESSAGE_UPDATE_QUEUE}
      RABBIT_ANSWER_MESSAGE_UPDATE_QUEUE: ${RABBIT_ANSWER_MESSAGE_UPDATE_QUEUE}
      RABBIT_REGISTRATION_MAIL_QUEUE: ${RABBIT_REGISTRATION_MAIL_QUEUE}
      POSTGRES_URL: ${POSTGRES_URL}
      POSTGRES_USERNAME: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DRIVER_CLASS_NAME: ${POSTGRES_DRIVER_CLASS_NAME}
      TG_BOT_TOKEN: ${TG_BOT_TOKEN}
      TG_BOT_FILE_INFO_URI: ${TG_BOT_FILE_INFO_URI}
      TG_BOT_FILE_STORAGE_URI: ${TG_BOT_FILE_STORAGE_URI}
      TG_BOT_URI: ${TG_BOT_URI}
      SALT: ${SALT}
      OPENAI_URL: ${OPENAI_URL}
      OPENAI_APIKEY: ${OPENAI_APIKEY}
      OPENAI_MODEL: ${OPENAI_MODEL}
    logging:
      driver: 'json-file'
      options:
        max-size: '100m'
        max-file: '3'
    depends_on:
      rabbit-mq:
        condition: service_healthy
      postgres-db:
        condition: service_healthy

  rest-service:
    container_name: rest-service
    restart: on-failure
    build:
      context: ./
      dockerfile: ./rest-service/Dockerfile
#   TODO нужно откомментировать для локального запуска без traefik
#    ports:
#      - ${REST_SERVICE_PORT}:${REST_SERVICE_PORT}
    environment:
      HOST_URL: 'telegramaibot.ru'
      REST_SERVICE_PORT: ${REST_SERVICE_PORT}
      POSTGRES_URL: ${POSTGRES_URL}
      POSTGRES_USERNAME: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DRIVER_CLASS_NAME: ${POSTGRES_DRIVER_CLASS_NAME}
      SALT: ${SALT}
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.rest-service.loadbalancer.server.port=${REST_SERVICE_PORT}"
      - "traefik.http.routers.rest-service.rule=Host(`telegramaibot.ru`) && PathPrefix(`/api`)"
      - "traefik.http.routers.rest-service.entrypoints=websecure8"
      - "traefik.http.routers.rest-service.tls=true"
    logging:
      driver: 'json-file'
      options:
        max-size: '100m'
        max-file: '3'
    depends_on:
      postgres-db:
        condition: service_healthy

  mail-service:
    container_name: mail-service
    restart: on-failure
    build:
      context: ./
      dockerfile: ./mail-service/Dockerfile
#    ports:
#      - ${MAIL_SERVICE_PORT}:${MAIL_SERVICE_PORT}
#      - ${MAIL_RECEIVER_PORT}:${MAIL_RECEIVER_PORT}
    environment:
      MAIL_SERVICE_PORT: ${MAIL_SERVICE_PORT}
      MAIL_RECEIVER_PORT: ${MAIL_RECEIVER_PORT}
      RABBIT_HOST: ${RABBIT_HOST}
      RABBIT_PORT: ${RABBIT_PORT}
      RABBIT_USERNAME: ${RABBIT_USERNAME}
      RABBIT_PASSWORD: ${RABBIT_PASSWORD}
      RABBIT_REGISTRATION_MAIL_QUEUE: ${RABBIT_REGISTRATION_MAIL_QUEUE}
      MAIL_HOST: ${MAIL_HOST}
      MAIL_PORT: ${MAIL_PORT}
      MAIL_PROTOCOL: ${MAIL_PROTOCOL}
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      ACTIVATION_URI: ${ACTIVATION_URI}
    logging:
      driver: 'json-file'
      options:
        max-size: '100m'
        max-file: '3'
    depends_on:
      rabbit-mq:
        condition: service_healthy

  rabbit-mq:
    container_name: rabbit-mq
    hostname: rabbitmq
    image: rabbitmq:3.12.12-management-alpine
    ports:
      - ${RABBIT_AMQP_PORT_MAPPING}
      - ${RABBIT_GUI_PORT_MAPPING}
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBIT_USERNAME}
      RABBITMQ_DEFAULT_PASS: ${RABBIT_PASSWORD}
    volumes:
      - rabbitmq-data:\C\Users\nguye\Documents\tech_spec_diplopma\rabbitmq
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "--silent", "--quiet", "ping" ]
      interval: 10s
      timeout: 10s
      retries: 6
      start_period: 30s
    restart: unless-stopped

  postgres-db:
    container_name: postgres-db
    hostname: postgres
    image: postgres:14.5
    volumes:
      - /postgres-data:/var/lib/postgresql/data
    ports:
      - ${POSTGRES_PORT_MAPPING}
    environment:
      POSTGRES_USER: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USERNAME} -d ${POSTGRES_DATABASE} -h 127.0.0.1" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  traefik:
    container_name: traefik
    image: traefik:v2.9
    ports:
      - 80:80
      - 8443:8443
      - 9443:9443
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./data:/etc/traefik/data
      - /home/vn/certs:/etc/traefik/certs
    environment:
      HOST_URL: 'telegramaibot.ru'
    labels:
      - "traefik.enable=true"

      - "traefik.http.routers.traefik.rule=Host(`telegramaibot.ru`)"
      - "traefik.http.routers.traefik.entrypoints=websecure9"
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.services.traefik.loadbalancer.server.port=8089"

      # Установка пароля для входа в админку
      - "traefik.http.middlewares.traefik-auth.basicauth.users=${TRAEFIK_USER}:${TRAEFIK_PASSWORD}"
      - "traefik.http.routers.traefik.middlewares=traefik-auth"

      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"

      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.permanent=false"
    command:
      - "--api.dashboard=true"
      - "--ping=true"
      - "--ping.entrypoint=ping"
      - "--entryPoints.ping.address=:8888"
      - "--entryPoints.web.address=:80"
      - "--entrypoints.websecure8.address=:8443"
      - "--entrypoints.websecure9.address=:9443"
      - "--providers.docker=true"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.file.filename=/etc/traefik/data/tls.yml"
    healthcheck:
      test: [ "CMD", "wget", "http://127.0.0.1:8888/ping","--spider" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    restart: unless-stopped